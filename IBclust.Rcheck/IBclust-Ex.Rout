
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "IBclust"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('IBclust')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AIBmix")
> ### * AIBmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AIBmix
> ### Title: Agglomerative Information Bottleneck Clustering for Mixed-Type
> ###   Data
> ### Aliases: AIBmix
> ### Keywords: clustering
> 
> ### ** Examples
> 
> # Example dataset with categorical, ordinal, and continuous variables
> set.seed(123)
> data_mix <- data.frame(
+   cat_var = factor(sample(letters[1:3], 100, replace = TRUE)),      # Nominal categorical variable
+   ord_var = factor(sample(c("low", "medium", "high"), 100, replace = TRUE),
+                    levels = c("low", "medium", "high"),
+                    ordered = TRUE),                                # Ordinal variable
+   cont_var1 = rnorm(100),                                          # Continuous variable 1
+   cont_var2 = runif(100)                                           # Continuous variable 2
+ )
> 
> # Perform Mixed-Type Hierarchical Clustering with Agglomerative IB
> result_mix <- AIBmix(X = data_mix, lambda = -1, s = -1, scale = TRUE)
> 
> # Print clustering results
> plot(result_mix, type = "dendrogram", xlab = "", sub = "", cex = 0.5)  # Plot dendrogram
> plot(result_mix, type = "info", col = "black", pch = 16)  # Plot dendrogram
> 
> # Simulated categorical data example
> set.seed(123)
> data_cat <- data.frame(
+   Var1 = as.factor(sample(letters[1:3], 200, replace = TRUE)),  # Nominal variable
+   Var2 = as.factor(sample(letters[4:6], 200, replace = TRUE)),  # Nominal variable
+   Var3 = factor(sample(c("low", "medium", "high"), 200, replace = TRUE),
+                 levels = c("low", "medium", "high"), ordered = TRUE)  # Ordinal variable
+ )
> 
> # Run AIBmix with automatic lambda selection 
> result_cat <- AIBmix(X = data_cat, lambda = -1)
> 
> # Print clustering results
> plot(result_cat, type = "dendrogram", xlab = "", sub = "", cex = 0.5)  # Plot dendrogram
> 
> # Results summary
> summary(result_cat)
Summary of AIBmix clustering
----------------------------
Call: AIBmix(X = data_cat, lambda = -1)
n = 200, merges = 199
I(X;Y) = 0.213200
merge cost summary: min=-0.000000, median=0.000000, max=0.051646

Information retained by number of clusters m:
   m I(T[m];Y)/I(X;Y) I(T[m];Y)
   2         0.223418  0.047633
   3         0.375693  0.080098
   5         0.571532  0.121851
  10         0.837027  0.178454
 200         1.000000  0.213200

Cluster sizes at m=2:

  1   2 
130  70 

Cluster sizes at m=3:

 2  3  1 
80 70 50 

Cluster sizes at m=5:

 2  3  5  4  1 
50 46 43 34 27 

(Additional cuts summarised: m=10, m=200)

Continuous variables: 0   Categorical variables: 3
s = -1
lambda = 0.5, 0.5, 0.7071
kernels = cont:gaussian, nom:aitchisonaitken, ord:liracine
> 
> # Simulated continuous data example
> set.seed(123)
> # Continuous data with 200 observations, 5 features
> data_cont <- as.data.frame(matrix(rnorm(1000), ncol = 5))
> 
> # Run AIBmix with automatic bandwidth selection 
> result_cont <- AIBmix(X = data_cont, s = -1, scale = TRUE)
> 
> # Print concise summary ofoutput
> print(result_cont)
Hierarchical clustering with AIBmix
-----------------------------------
Call: AIBmix(X = data_cont, s = -1, scale = TRUE)
Observations: 200
Merges: 199 steps  |  merge cost range: [0.000005, 0.014689]
I(X;Y): 0.109389
Information retained I(T_m;Y)/I(X;Y) at selected m:
   m info_ret
   2 0.132979
   3 0.226932
   5 0.356274
  10 0.514307
 200 1.000000
Continuous variables: 5   Categorical variables: 0
s = 2.3, 2.3, 2.3, 2.3, 2.3
lambda = -1
kernels = cont:gaussian, nom:aitchisonaitken, ord:liracine
> 
> # Print clustering results
> plot(result_cont, type = "dendrogram", xlab = "", sub = "", cex = 0.5)  # Plot dendrogram
> 
> 
> 
> cleanEx()
> nameEx("DIBmix")
> ### * DIBmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DIBmix
> ### Title: Deterministic Information Bottleneck Clustering for Mixed-Type
> ###   Data
> ### Aliases: DIBmix
> ### Keywords: clustering
> 
> ### ** Examples
> 
> # Example 1: Basic Mixed-Type Clustering
> set.seed(123)
> 
> # Create a more realistic dataset with mixed variable types
> data_mix <- data.frame(
+   # Categorical variables
+   education = factor(sample(c("High School", "Bachelor", "Master", "PhD"), 150, 
+                            replace = TRUE, prob = c(0.4, 0.3, 0.2, 0.1))),
+   employment = factor(sample(c("Full-time", "Part-time", "Unemployed"), 150, 
+                             replace = TRUE, prob = c(0.6, 0.25, 0.15))),
+   
+   # Ordinal variable
+   satisfaction = factor(sample(c("Low", "Medium", "High"), 150, replace = TRUE),
+                        levels = c("Low", "Medium", "High"), ordered = TRUE),
+   
+   # Continuous variables  
+   income = rlnorm(150, meanlog = 10, sdlog = 0.5),  # Log-normal income
+   age = rnorm(150, mean = 35, sd = 10),             # Normally distributed age
+   experience = rpois(150, lambda = 8)               # Years of experience
+ )
> 
> # Perform Mixed-Type Clustering
> result_mix <- DIBmix(X = data_mix, ncl = 3, nstart = 5)
  |                                                                              |                                                                      |   0%  |                                                                              |==============                                                        |  20%  |                                                                              |============================                                          |  40%  |                                                                              |==========================================                            |  60%  |                                                                              |========================================================              |  80%  |                                                                              |======================================================================| 100%
> 
> # View results
> print(paste("Number of clusters found:", length(unique(result_mix$Cluster))))
[1] "Number of clusters found: 3"
> print(paste("Mutual Information:", round(result_mix$MutualInfo, 3)))
[1] "Mutual Information: 0.328"
> table(result_mix$Cluster)

 1  2  3 
74 16 60 
> 
> # Example 2: Comparing cat_first parameter
> # When categorical variables are more informative
> result_cat_first <- DIBmix(X = data_mix, ncl = 3,
+                            cat_first = TRUE,  # Prioritize categorical variables
+                            nstart = 5)
  |                                                                              |                                                                      |   0%  |                                                                              |==============                                                        |  20%  |                                                                              |============================                                          |  40%  |                                                                              |==========================================                            |  60%  |                                                                              |========================================================              |  80%  |                                                                              |======================================================================| 100%
> 
> # When continuous variables are more informative (default)
> result_cont_first <- DIBmix(X = data_mix, ncl = 3,
+                             cat_first = FALSE,
+                             nstart = 5)
  |                                                                              |                                                                      |   0%  |                                                                              |==============                                                        |  20%  |                                                                              |============================                                          |  40%  |                                                                              |==========================================                            |  60%  |                                                                              |========================================================              |  80%  |                                                                              |======================================================================| 100%
> 
> # Compare clustering performance
> if (requireNamespace("mclust", quietly = TRUE)){  # For adjustedRandIndex
+   print(paste("Agreement between approaches:", 
+               round(mclust::adjustedRandIndex(result_cat_first$Cluster, 
+                     result_cont_first$Cluster), 3)))
+   }
[1] "Agreement between approaches: -0.013"
> 
> plot(result_cat_first, type = "sizes") # Bar plot of cluster sizes
> plot(result_cat_first, type = "info")  # Information-theoretic quantities plot
> plot(result_cat_first, type = "beta")  # Plot of evolution of beta
> 
> # Simulated categorical data example
> data_cat <- data.frame(
+   Var1 = as.factor(sample(letters[1:3], 200, replace = TRUE)),  # Nominal variable
+   Var2 = as.factor(sample(letters[4:6], 200, replace = TRUE)),  # Nominal variable
+   Var3 = factor(sample(c("low", "medium", "high"), 200, replace = TRUE),
+                 levels = c("low", "medium", "high"), ordered = TRUE)  # Ordinal variable
+ )
> 
> # Perform hard clustering on categorical data with Deterministic IB
> result_cat <- DIBmix(X = data_cat, ncl = 3, lambda = -1, nstart = 5)
  |                                                                              |                                                                      |   0%  |                                                                              |==============                                                        |  20%  |                                                                              |============================                                          |  40%  |                                                                              |==========================================                            |  60%  |                                                                              |========================================================              |  80%  |                                                                              |======================================================================| 100%
> 
> # Print clustering results
> print(result_cat$Cluster)       # Cluster assignments
  [1] 1 1 2 1 1 1 1 3 2 1 2 1 1 2 1 2 2 1 1 3 1 3 2 2 1 2 2 1 3 2 3 2 3 1 1 3 2
 [38] 3 2 1 1 2 2 1 2 3 2 2 2 3 2 2 1 2 1 2 2 1 1 2 1 1 2 1 1 3 1 2 3 1 3 2 1 3
 [75] 2 2 2 2 2 1 2 2 2 1 2 2 1 2 1 1 3 2 2 2 1 1 3 1 1 2 2 2 2 1 2 2 1 2 1 2 1
[112] 1 2 3 3 1 1 2 3 1 3 2 2 3 1 3 2 2 1 1 2 1 1 1 2 3 2 2 1 1 1 3 2 1 2 2 1 1
[149] 3 2 1 2 3 1 1 3 1 2 2 3 1 2 1 2 2 3 1 1 2 2 1 1 1 3 1 3 2 2 2 2 2 3 3 2 2
[186] 3 2 1 3 1 1 2 1 3 2 3 2 3 2 2
> print(result_cat$Entropy)       # Final entropy
[1] 1.509244
> print(result_cat$MutualInfo)    # Mutual information
[1] 0.08311957
> 
> # Simulated continuous data example
> set.seed(123)
> # Continuous data with 200 observations, 5 features
> data_cont <- as.data.frame(matrix(rnorm(1000), ncol = 5))
> 
> # Perform hard clustering on continuous data with Deterministic IB
> result_cont <- DIBmix(X = data_cont, ncl = 3, s = -1, nstart = 5)
  |                                                                              |                                                                      |   0%  |                                                                              |==============                                                        |  20%  |                                                                              |============================                                          |  40%  |                                                                              |==========================================                            |  60%  |                                                                              |========================================================              |  80%  |                                                                              |======================================================================| 100%
> 
> # Print clustering results
> print(result_cont$Cluster)       # Cluster assignments
  [1] 3 3 1 1 2 1 2 1 1 2 2 2 3 2 3 1 2 1 2 3 2 1 3 1 2 3 2 2 2 3 1 2 1 1 2 2 2
 [38] 3 3 2 2 1 3 2 1 3 2 2 1 3 2 2 1 2 1 1 3 3 3 1 2 3 3 3 1 1 2 2 3 1 2 1 3 2
 [75] 1 1 2 1 1 2 2 3 2 1 2 2 2 3 2 2 3 3 3 1 1 3 3 2 3 1 2 2 2 1 1 3 2 1 3 3 1
[112] 3 2 2 3 1 1 2 1 1 2 1 2 1 2 1 2 3 1 3 3 2 2 3 2 2 2 2 3 1 1 3 3 3 2 2 3 1
[149] 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 2 3 3 3 2 3 3 1 2 3 2 1 3 2 2 3 2 1 3 3 2 1
[186] 3 3 2 2 1 1 2 3 2 2 3 1 3 2 2
> print(result_cont$Entropy)       # Final entropy
[1] 1.573735
> print(result_cont$MutualInfo)    # Mutual information
[1] 0.03066401
> 
> # Summary of output
> print(result_cont)
Hard clustering with DIBmix 
--------------------------- 
Call: DIBmix(X = data_cont, ncl = 3, s = -1, nstart = 5)
Observations: 200   Clusters: 3
Continuous variables: 5   Categorical variables: 0
Mutual information I(Y;T): 0.030664
Entropy H(T): 1.573735   Conditional entropy H(T|X): 0.000000
Converged: TRUE
Iterations: 8
Convergence tolerance: 0
Cluster sizes:
cl
 2  3  1 
78 64 58 
> summary(result_cont)
Summary of DIBmix clustering
----------------------------
Call: DIBmix(X = data_cont, ncl = 3, s = -1, nstart = 5)
n = 200, k = 3

Continuous variables: 5   Categorical variables: 0

Cluster sizes:
cl
 2  3  1 
78 64 58 

Proportions:
cl
   2    3    1 
0.39 0.32 0.29 

Information metrics:
Entropy H(T): 1.573735
Conditional H(T|X): 0.000000
Mutual Information I(Y;T): 0.030664

Hyperparameters & details:
beta = 45.0627, 106.0782, 9.9812, 23.6137, 26.7882, 86.9771, ... (9 total)
s = 2.3, 2.3, 2.3, 2.3, 2.3
lambda = -1
alpha = 0
Kernels = cont:gaussian, nom:aitchisonaitken, ord:liracine

Converged: TRUE
Iterations: 8
Convergence tolerance: 0
> 
> 
> 
> cleanEx()
> nameEx("GIBmix")
> ### * GIBmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GIBmix
> ### Title: Generalised Information Bottleneck Clustering for Mixed-Type
> ###   Data
> ### Aliases: GIBmix
> ### Keywords: clustering
> 
> ### ** Examples
> 
> # Example dataset with categorical, ordinal, and continuous variables
> set.seed(123)
> data_mix <- data.frame(
+   cat_var = factor(sample(letters[1:3], 100, replace = TRUE)),      # Nominal categorical variable
+   ord_var = factor(sample(c("low", "medium", "high"), 100, replace = TRUE),
+                    levels = c("low", "medium", "high"),
+                    ordered = TRUE),                                # Ordinal variable
+   cont_var1 = rnorm(100),                                          # Continuous variable 1
+   cont_var2 = runif(100)                                           # Continuous variable 2
+ )
> 
> # Perform Mixed-Type Fuzzy Clustering with Generalised IB
> result_mix <- GIBmix(X = data_mix, ncl = 3, beta = 2, alpha = 0.5, nstart = 5)
  |                                                                              |                                                                      |   0%  |                                                                              |==============                                                        |  20%  |                                                                              |============================                                          |  40%  |                                                                              |==========================================                            |  60%  |                                                                              |========================================================              |  80%  |                                                                              |======================================================================| 100%
> 
> # Print clustering results
> print(result_mix$Cluster)       # Cluster membership matrix
             [,1]         [,2]         [,3]         [,4]         [,5]
[1,] 1.588796e-17 5.308456e-17 1.538398e-25 3.608746e-35 2.223531e-10
[2,] 2.126541e-02 5.511004e-06 7.453462e-01 7.018879e-04 1.137991e-05
[3,] 9.787346e-01 9.999945e-01 2.546538e-01 9.992981e-01 9.999886e-01
             [,6]         [,7]         [,8]         [,9]        [,10]
[1,] 7.966549e-34 6.021037e-14 5.037381e-14 1.974676e-28 2.403203e-21
[2,] 9.877869e-01 7.720557e-05 9.999806e-01 7.136926e-06 9.995092e-01
[3,] 1.221308e-02 9.999228e-01 1.943064e-05 9.999929e-01 4.907890e-04
            [,11]        [,12]        [,13]        [,14]        [,15]
[1,] 4.900419e-22 3.192274e-35 1.441891e-32 1.432844e-31 4.929121e-27
[2,] 1.546105e-02 9.964000e-01 9.478074e-01 7.325448e-02 9.123531e-01
[3,] 9.845389e-01 3.600039e-03 5.219257e-02 9.267455e-01 8.764689e-02
            [,16]        [,17]        [,18]        [,19]        [,20]
[1,] 1.428024e-29 4.094353e-13 9.479929e-12 1.227495e-27 1.769203e-20
[2,] 1.271477e-06 6.092417e-06 9.999032e-01 1.538269e-04 9.993587e-01
[3,] 9.999987e-01 9.999939e-01 9.677925e-05 9.998462e-01 6.412883e-04
            [,21]        [,22]        [,23]        [,24]        [,25]
[1,] 1.631987e-14 7.501017e-22 5.155455e-34 5.021106e-18 1.348136e-19
[2,] 1.517849e-04 9.686239e-01 9.998380e-01 7.992603e-06 6.089745e-06
[3,] 9.998482e-01 3.137611e-02 1.619973e-04 9.999920e-01 9.999939e-01
            [,26]        [,27]        [,28]        [,29]        [,30]
[1,] 8.136570e-20 2.688789e-23 4.316359e-19 7.368321e-31 1.234429e-10
[2,] 9.657168e-01 2.232854e-02 9.996741e-01 9.999342e-01 4.222236e-07
[3,] 3.428323e-02 9.776715e-01 3.258768e-04 6.578746e-05 9.999996e-01
            [,31]        [,32]        [,33]        [,34]        [,35]
[1,] 2.301131e-27 2.594922e-32 9.999999e-01 3.136480e-31 4.387494e-16
[2,] 7.375356e-02 9.901286e-01 3.146126e-13 9.999068e-01 3.624034e-05
[3,] 9.262464e-01 9.871392e-03 1.235367e-07 9.321567e-05 9.999638e-01
            [,36]        [,37]        [,38]        [,39]        [,40]
[1,] 8.473091e-13 8.583297e-27 2.747576e-22 1.183488e-17 1.204092e-21
[2,] 5.121785e-07 9.233012e-01 9.992037e-01 1.268181e-03 2.730465e-03
[3,] 9.999995e-01 7.669883e-02 7.962620e-04 9.987318e-01 9.972695e-01
            [,41]        [,42]        [,43]        [,44]        [,45]
[1,] 1.052149e-18 9.618745e-17 0.0001259737 9.807457e-24 6.883923e-29
[2,] 3.991477e-04 1.470685e-06 0.0030034117 6.352022e-05 5.842087e-01
[3,] 9.996009e-01 9.999985e-01 0.9968706147 9.999365e-01 4.157913e-01
            [,46]        [,47]        [,48]        [,49]        [,50]
[1,] 1.708386e-21 1.412128e-25 1.569275e-16 5.854151e-24 7.681837e-26
[2,] 1.088848e-01 9.999314e-01 6.429754e-04 4.224472e-02 1.083797e-05
[3,] 8.911152e-01 6.858138e-05 9.993570e-01 9.577553e-01 9.999892e-01
            [,51]        [,52]        [,53]        [,54]        [,55]
[1,] 1.323880e-18 7.188149e-23 7.713336e-31 2.251597e-20 6.394609e-22
[2,] 9.999290e-01 9.969597e-03 9.941613e-01 3.554258e-05 3.280202e-02
[3,] 7.101847e-05 9.900304e-01 5.838674e-03 9.999645e-01 9.671980e-01
            [,56]        [,57]        [,58]        [,59]        [,60]
[1,] 1.470906e-18 7.328672e-17 2.827825e-21 7.239404e-23 2.587970e-18
[2,] 9.994357e-01 1.908018e-06 9.997620e-01 7.736429e-04 1.618936e-03
[3,] 5.642754e-04 9.999981e-01 2.380345e-04 9.992264e-01 9.983811e-01
            [,61]        [,62]        [,63]        [,64]        [,65]
[1,] 6.764008e-22 9.106119e-16 5.671156e-27 6.080704e-32 9.205596e-15
[2,] 8.470745e-04 5.024683e-07 2.111214e-01 9.776038e-01 9.999954e-01
[3,] 9.991529e-01 9.999995e-01 7.888786e-01 2.239623e-02 4.621266e-06
            [,66]        [,67]        [,68]        [,69]        [,70]
[1,] 9.555040e-13 1.042012e-36 3.169475e-23 1.112363e-34 3.267379e-11
[2,] 2.013086e-07 9.999529e-01 1.017708e-03 9.998134e-01 9.998053e-01
[3,] 9.999998e-01 4.709024e-05 9.989823e-01 1.866478e-04 1.947095e-04
            [,71]        [,72]        [,73]        [,74]        [,75]
[1,] 3.388692e-11 4.729247e-28 4.190920e-13 6.798569e-28 9.523592e-23
[2,] 1.722734e-02 9.981233e-01 2.620071e-07 9.917391e-01 3.162539e-03
[3,] 9.827727e-01 1.876683e-03 9.999997e-01 8.260876e-03 9.968375e-01
            [,76]        [,77]        [,78]        [,79]        [,80]
[1,] 6.728861e-32 1.785381e-25 1.081973e-07 2.865296e-26 5.393753e-17
[2,] 9.986238e-01 2.459525e-01 6.973087e-05 9.975305e-01 2.939622e-06
[3,] 1.376216e-03 7.540475e-01 9.999302e-01 2.469534e-03 9.999971e-01
            [,81]        [,82]        [,83]        [,84]        [,85]
[1,] 1.753797e-24 4.853451e-10 3.646676e-29 1.893175e-34 6.225176e-07
[2,] 9.988836e-01 2.070737e-05 9.968391e-01 9.999255e-01 4.509754e-07
[3,] 1.116374e-03 9.999793e-01 3.160872e-03 7.448572e-05 9.999989e-01
            [,86]        [,87]        [,88]        [,89]        [,90]
[1,] 6.400961e-30 1.411378e-30 4.661277e-28 3.357725e-28 6.127860e-22
[2,] 9.993749e-01 9.958497e-01 9.272600e-03 2.599607e-03 4.430025e-05
[3,] 6.250599e-04 4.150294e-03 9.907274e-01 9.974004e-01 9.999557e-01
            [,91]        [,92]        [,93]        [,94]        [,95]
[1,] 1.171828e-17 4.109282e-19 6.235364e-17 1.334598e-24 3.610573e-23
[2,] 5.339059e-01 9.999648e-01 2.735851e-01 6.543911e-01 9.414647e-01
[3,] 4.660941e-01 3.517227e-05 7.264149e-01 3.456089e-01 5.853531e-02
            [,96]        [,97]        [,98]        [,99]       [,100]
[1,] 2.587323e-26 6.916624e-26 8.537084e-12 2.146049e-25 7.734461e-15
[2,] 4.226102e-01 1.934170e-01 1.876546e-07 2.909250e-06 9.999968e-01
[3,] 5.773898e-01 8.065830e-01 9.999998e-01 9.999971e-01 3.222977e-06
> print(result_mix$Entropy)       # Entropy of final clustering
[1] 1.058023
> print(result_mix$CondEntropy)   # Conditional entropy of final clustering
[1] 0.1297684
> print(result_mix$MutualInfo)    # Mutual information between Y and T
[1] 0.5294276
> 
> # Summary of output
> summary(result_mix)
Summary of GIBmix clustering
----------------------------
Call: GIBmix(X = data_mix, ncl = 3, beta = 2, alpha = 0.5, nstart = 5)
n = 100, k = 3

Continuous variables: 2   Categorical variables: 2

Mean membership per cluster:
[1] 0.0100 0.4289 0.5611

Hardened sizes (argmax):
hardened
 3  2  1 
56 43  1 

Information metrics:
Entropy H(T): 1.058023
Conditional H(T|X): 0.129768
Mutual Information I(Y;T): 0.529428

Hyperparameters & details:
beta = 2
s = 0.7, 0.7
lambda = 0.5, 0.7071
alpha = 0.5
Kernels = cont:gaussian, nom:aitchisonaitken, ord:liracine

Converged: TRUE
Iterations: 65
Convergence tolerance: 1e-05
> 
> # Simulated categorical data example
> set.seed(123)
> data_cat <- data.frame(
+   Var1 = as.factor(sample(letters[1:3], 200, replace = TRUE)),  # Nominal variable
+   Var2 = as.factor(sample(letters[4:6], 200, replace = TRUE)),  # Nominal variable
+   Var3 = factor(sample(c("low", "medium", "high"), 200, replace = TRUE),
+                 levels = c("low", "medium", "high"), ordered = TRUE)  # Ordinal variable
+ )
> 
> # Perform Fuzzy Clustering on categorical data with Generalised IB
> result_cat <- GIBmix(X = data_cat, ncl = 2, beta = 25, alpha = 0.75, lambda = -1, nstart = 5)
  |                                                                              |                                                                      |   0%  |                                                                              |==============                                                        |  20%  |                                                                              |============================                                          |  40%  |                                                                              |==========================================                            |  60%  |                                                                              |========================================================              |  80%  |                                                                              |======================================================================| 100%
> 
> # Print clustering results
> print(result_cat$Cluster)       # Cluster membership matrix
            [,1]        [,2]        [,3]        [,4]       [,5]        [,6]
[1,] 0.005527515 0.003914096 0.007123054 0.002555871 0.00851922 0.993385746
[2,] 0.994472485 0.996085904 0.992876946 0.997444129 0.99148078 0.006614254
           [,7]        [,8]       [,9]       [,10]       [,11]      [,12]
[1,] 0.98473752 0.993385746 0.98429958 0.007982584 0.002555871 0.97119057
[2,] 0.01526248 0.006614254 0.01570042 0.992017416 0.997444129 0.02880943
           [,13]       [,14]       [,15]       [,16]      [,17]       [,18]
[1,] 0.003425297 0.993385746 0.005527515 0.003612475 0.98771437 0.004278815
[2,] 0.996574703 0.006614254 0.994472485 0.996387525 0.01228563 0.995721185
          [,19]      [,20]       [,21]       [,22]     [,23]       [,24]
[1,] 0.01148544 0.99043248 0.003612475 0.003425297 0.9859828 0.993385746
[2,] 0.98851456 0.00956752 0.996387525 0.996574703 0.0140172 0.006614254
         [,25]      [,26]      [,27]      [,28]       [,29]       [,30]
[1,] 0.9859828 0.98473752 0.98634934 0.01190586 0.003936062 0.004070245
[2,] 0.0140172 0.01526248 0.01365066 0.98809414 0.996063938 0.995929755
           [,31]      [,32]     [,33]       [,34]       [,35]       [,36]
[1,] 0.004667492 0.00851922 0.9859828 0.004667492 0.003936062 0.993385746
[2,] 0.995332508 0.99148078 0.0140172 0.995332508 0.996063938 0.006614254
           [,37]      [,38]      [,39]       [,40]       [,41]      [,42]
[1,] 0.004667492 0.98429958 0.99043248 0.003425297 0.002713471 0.98429958
[2,] 0.995332508 0.01570042 0.00956752 0.996574703 0.997286529 0.01570042
           [,43]      [,44]       [,45]      [,46]       [,47]       [,48]
[1,] 0.007123054 0.99043248 0.003914096 0.97278522 0.003936062 0.004070245
[2,] 0.992876946 0.00956752 0.996085904 0.02721478 0.996063938 0.995929755
           [,49]       [,50]      [,51]      [,52]     [,53]      [,54]
[1,] 0.003425297 0.002713471 0.99043248 0.99043248 0.9859828 0.98634934
[2,] 0.996574703 0.997286529 0.00956752 0.00956752 0.0140172 0.01365066
           [,55]      [,56]       [,57]      [,58]       [,59]       [,60]
[1,] 0.005507497 0.98634934 0.004667492 0.98429958 0.003425297 0.008371663
[2,] 0.994492503 0.01365066 0.995332508 0.01570042 0.996574703 0.991628337
          [,61]     [,62]      [,63]     [,64]      [,65]      [,66]
[1,] 0.97278522 0.9859828 0.98634934 0.9859828 0.01190586 0.98429958
[2,] 0.02721478 0.0140172 0.01365066 0.0140172 0.98809414 0.01570042
           [,67]      [,68]       [,69]       [,70]       [,71]       [,72]
[1,] 0.993385746 0.98473752 0.003914096 0.008371663 0.002713471 0.004278815
[2,] 0.006614254 0.01526248 0.996085904 0.991628337 0.997286529 0.995721185
          [,73]      [,74]       [,75]       [,76]      [,77]       [,78]
[1,] 0.00851922 0.98634934 0.993385746 0.993385746 0.99043248 0.993385746
[2,] 0.99148078 0.01365066 0.006614254 0.006614254 0.00956752 0.006614254
          [,79]      [,80]      [,81]       [,82]       [,83]       [,84]
[1,] 0.01148544 0.98634934 0.97119057 0.005527515 0.007123054 0.003425297
[2,] 0.98851456 0.01365066 0.02880943 0.994472485 0.992876946 0.996574703
          [,85]      [,86]       [,87]       [,88]      [,89]       [,90]
[1,] 0.98473752 0.98634934 0.993385746 0.002115936 0.98429958 0.003936062
[2,] 0.01526248 0.01365066 0.006614254 0.997884064 0.01570042 0.996063938
           [,91]      [,92]       [,93]       [,94]       [,95]       [,96]
[1,] 0.993385746 0.98771437 0.007982584 0.002713471 0.004070245 0.003936062
[2,] 0.006614254 0.01228563 0.992017416 0.997286529 0.995929755 0.996063938
          [,97]       [,98]     [,99]    [,100]      [,101]      [,102]
[1,] 0.97119057 0.003612475 0.9859828 0.9859828 0.004278815 0.993385746
[2,] 0.02880943 0.996387525 0.0140172 0.0140172 0.995721185 0.006614254
          [,103]      [,104]      [,105]      [,106]     [,107]      [,108]
[1,] 0.004070245 0.004278815 0.003425297 0.003425297 0.00851922 0.005507497
[2,] 0.995929755 0.995721185 0.996574703 0.996574703 0.99148078 0.994492503
          [,109]      [,110]     [,111]      [,112]     [,113]      [,114]
[1,] 0.005507497 0.002713471 0.98473752 0.002713471 0.01190586 0.005527515
[2,] 0.994492503 0.997286529 0.01526248 0.997286529 0.98809414 0.994472485
          [,115]      [,116]     [,117]     [,118]     [,119]     [,120]
[1,] 0.004070245 0.007982584 0.01190586 0.01190586 0.97119057 0.98771437
[2,] 0.995929755 0.992017416 0.98809414 0.98809414 0.02880943 0.01228563
          [,121]      [,122]      [,123]      [,124]     [,125]      [,126]
[1,] 0.005507497 0.003936062 0.005507497 0.004278815 0.97278522 0.004278815
[2,] 0.994492503 0.996063938 0.994492503 0.995721185 0.02721478 0.995721185
          [,127]      [,128]     [,129]    [,130]     [,131]     [,132]
[1,] 0.003936062 0.004278815 0.98634934 0.9859828 0.98429958 0.01190586
[2,] 0.996063938 0.995721185 0.01365066 0.0140172 0.01570042 0.98809414
         [,133]      [,134]     [,135]     [,136]     [,137]      [,138]
[1,] 0.01190586 0.993385746 0.98771437 0.00851922 0.98429958 0.002713471
[2,] 0.98809414 0.006614254 0.01228563 0.99148078 0.01570042 0.997286529
          [,139]     [,140]     [,141]      [,142]      [,143]      [,144]
[1,] 0.003425297 0.97119057 0.98634934 0.007123054 0.004278815 0.005507497
[2,] 0.996574703 0.02880943 0.01365066 0.992876946 0.995721185 0.994492503
          [,145]     [,146]      [,147]     [,148]      [,149]      [,150]
[1,] 0.004667492 0.98429958 0.002115936 0.00851922 0.002555871 0.005507497
[2,] 0.995332508 0.01570042 0.997884064 0.99148078 0.997444129 0.994492503
         [,151]     [,152]      [,153]     [,154]      [,155]      [,156]
[1,] 0.01148544 0.98771437 0.004070245 0.97278522 0.003914096 0.004278815
[2,] 0.98851456 0.01228563 0.995929755 0.02721478 0.996085904 0.995721185
          [,157]      [,158]     [,159]      [,160]     [,161]      [,162]
[1,] 0.003936062 0.002115936 0.97119057 0.004070245 0.98634934 0.008371663
[2,] 0.996063938 0.997884064 0.02880943 0.995929755 0.01365066 0.991628337
         [,163]      [,164]      [,165]     [,166]      [,167]      [,168]
[1,] 0.98429958 0.007123054 0.003425297 0.98473752 0.003612475 0.004070245
[2,] 0.01570042 0.992876946 0.996574703 0.01526248 0.996387525 0.995929755
          [,169]      [,170]     [,171]      [,172]      [,173]      [,174]
[1,] 0.007123054 0.003914096 0.01148544 0.005527515 0.993385746 0.004667492
[2,] 0.992876946 0.996085904 0.98851456 0.994472485 0.006614254 0.995332508
          [,175]     [,176]     [,177]     [,178]      [,179]      [,180]
[1,] 0.003612475 0.98473752 0.98429958 0.01148544 0.008371663 0.002713471
[2,] 0.996387525 0.01526248 0.01570042 0.98851456 0.991628337 0.997286529
          [,181]      [,182]      [,183]     [,184]      [,185]     [,186]
[1,] 0.004667492 0.002555871 0.002115936 0.99043248 0.008371663 0.99043248
[2,] 0.995332508 0.997444129 0.997884064 0.00956752 0.991628337 0.00956752
         [,187]     [,188]      [,189]      [,190]      [,191]      [,192]
[1,] 0.98771437 0.98634934 0.002115936 0.002555871 0.003612475 0.002713471
[2,] 0.01228563 0.01365066 0.997884064 0.997444129 0.996387525 0.997286529
         [,193]      [,194]      [,195]      [,196]      [,197]      [,198]
[1,] 0.98634934 0.004667492 0.002115936 0.005527515 0.007123054 0.005507497
[2,] 0.01365066 0.995332508 0.997884064 0.994472485 0.992876946 0.994492503
          [,199]      [,200]
[1,] 0.003612475 0.002555871
[2,] 0.996387525 0.997444129
> print(result_cat$Entropy)       # Entropy of final clustering
[1] 0.9600031
> print(result_cat$CondEntropy)   # Conditional entropy of final clustering
[1] 0.06962192
> print(result_cat$MutualInfo)    # Mutual information between Y and T
[1] 0.04832157
> 
> # Simulated continuous data example
> set.seed(123)
> # Continuous data with 200 observations, 5 features
> data_cont <- as.data.frame(matrix(rnorm(1000), ncol = 5))
> 
> # Perform Fuzzy Clustering on continuous data with Generalised IB
> result_cont <- GIBmix(X = data_cont, ncl = 2, beta = 50, alpha = 0.75, s = -1, nstart = 5)
  |                                                                              |                                                                      |   0%  |                                                                              |==============                                                        |  20%  |                                                                              |============================                                          |  40%  |                                                                              |==========================================                            |  60%  |                                                                              |========================================================              |  80%  |                                                                              |======================================================================| 100%
> 
> # Print clustering results
> print(result_cont$Cluster)       # Cluster membership matrix
          [,1]       [,2]       [,3]      [,4]         [,5]         [,6]
[1,] 0.6114497 0.04188058 0.00532807 0.6341944 0.0009490579 0.0008864489
[2,] 0.3885503 0.95811942 0.99467193 0.3658056 0.9990509421 0.9991135511
             [,7]       [,8]      [,9]       [,10]        [,11]        [,12]
[1,] 0.0006366646 0.91757404 0.7070546 0.006577243 4.873902e-07 7.544543e-05
[2,] 0.9993633354 0.08242596 0.2929454 0.993422757 9.999995e-01 9.999246e-01
           [,13]       [,14]       [,15]      [,16]        [,17]     [,18]
[1,] 0.003567206 0.002276117 0.001339275 0.98949524 0.0006235165 0.4119524
[2,] 0.996432794 0.997723883 0.998660725 0.01050476 0.9993764835 0.5880476
            [,19]        [,20]        [,21]     [,22]      [,23]     [,24]
[1,] 8.962606e-06 5.371527e-06 6.769355e-05 0.1171346 0.06501404 0.1634144
[2,] 9.999910e-01 9.999946e-01 9.999323e-01 0.8828654 0.93498596 0.8365856
           [,25]       [,26]        [,27]        [,28]       [,29]        [,30]
[1,] 0.006943729 0.004940661 9.427429e-06 5.079834e-06 0.002969707 5.388422e-07
[2,] 0.993056271 0.995059339 9.999906e-01 9.999949e-01 0.997030293 9.999995e-01
         [,31]       [,32]       [,33]      [,34]        [,35]       [,36]
[1,] 0.9185912 0.002411733 0.009637647 0.03851214 0.0005397828 0.002278928
[2,] 0.0814088 0.997588267 0.990362353 0.96148786 0.9994602172 0.997721072
            [,37]        [,38]      [,39]       [,40]        [,41]     [,42]
[1,] 3.775146e-06 0.0001424919 0.04429041 0.001562696 0.0009657519 0.8543419
[2,] 9.999962e-01 0.9998575081 0.95570959 0.998437304 0.9990342481 0.1456581
          [,43]        [,44]       [,45]    [,46]       [,47]       [,48]
[1,] 0.08220562 1.320025e-05 0.007993245 0.349575 0.001019772 0.006564203
[2,] 0.91779438 9.999868e-01 0.992006755 0.650425 0.998980228 0.993435797
          [,49]      [,50]       [,51]        [,52]      [,53]        [,54]
[1,] 0.08948849 0.01717982 0.008630936 0.0003376375 0.02002317 3.444446e-05
[2,] 0.91051151 0.98282018 0.991369064 0.9996623625 0.97997683 9.999656e-01
           [,55]       [,56]        [,57]       [,58]       [,59]      [,60]
[1,] 0.992031455 0.001504031 0.0007516606 0.002274361 0.001778308 0.01966121
[2,] 0.007968545 0.998495969 0.9992483394 0.997725639 0.998221692 0.98033879
           [,61]       [,62]        [,63]      [,64]      [,65]       [,66]
[1,] 0.003061584 0.001762174 1.399307e-05 0.03494136 0.98919631 0.991944981
[2,] 0.996938416 0.998237826 9.999860e-01 0.96505864 0.01080369 0.008055019
            [,67]        [,68]        [,69]      [,70]        [,71]     [,72]
[1,] 2.751234e-06 0.0007944037 5.505012e-05 0.00591124 0.0004333323 0.7064891
[2,] 9.999972e-01 0.9992055963 9.999449e-01 0.99408876 0.9995666677 0.2935109
            [,73]      [,74]     [,75]    [,76]      [,77]     [,78]     [,79]
[1,] 0.0003642739 0.01572865 0.8974936 0.402218 0.05528163 0.9752303 0.3746036
[2,] 0.9996357261 0.98427135 0.1025064 0.597782 0.94471837 0.0247697 0.6253964
           [,80]        [,81]        [,82]       [,83]      [,84]      [,85]
[1,] 0.007277106 0.0003430587 0.0002140525 0.005013406 0.07379985 0.04620853
[2,] 0.992722894 0.9996569413 0.9997859475 0.994986594 0.92620015 0.95379147
           [,86]        [,87]      [,88]        [,89]      [,90]        [,91]
[1,] 0.009740124 3.219134e-05 0.01509717 0.0001164452 0.03079155 0.0008218596
[2,] 0.990259876 9.999678e-01 0.98490283 0.9998835548 0.96920845 0.9991781404
          [,92]        [,93]     [,94]     [,95]       [,96]      [,97]
[1,] 0.01135523 0.0001503243 0.7997928 0.7178241 0.000387145 0.02079808
[2,] 0.98864477 0.9998496757 0.2002072 0.2821759 0.999612855 0.97920192
            [,98]       [,99]    [,100]     [,101]       [,102]      [,103]
[1,] 7.778731e-06 0.009533986 0.6357354 0.00028287 0.0003588171 0.001277638
[2,] 9.999922e-01 0.990466014 0.3642646 0.99971713 0.9996411829 0.998722362
         [,104]    [,105]       [,106]      [,107]   [,108]    [,109]    [,110]
[1,] 0.05644166 0.6590416 0.0008784424 0.003179871 0.435049 0.1743306 0.1086256
[2,] 0.94355834 0.3409584 0.9991215576 0.996820129 0.564951 0.8256694 0.8913744
          [,111]      [,112]       [,113]       [,114]      [,115]   [,116]
[1,] 0.996625515 0.000256548 0.0005808139 4.715677e-06 0.002500861 0.185308
[2,] 0.003374485 0.999743452 0.9994191861 9.999953e-01 0.997499139 0.814692
        [,117]       [,118]    [,119]     [,120]      [,121]    [,122]
[1,] 0.1203661 1.659988e-06 0.7864017 0.94586024 0.001564563 0.4298628
[2,] 0.8796339 9.999983e-01 0.2135983 0.05413976 0.998435437 0.5701372
           [,123]    [,124]       [,125]    [,126]       [,127]     [,128]
[1,] 0.0003892423 0.2840601 0.0002528094 0.6164213 0.0004107187 0.01995826
[2,] 0.9996107577 0.7159399 0.9997471906 0.3835787 0.9995892813 0.98004174
           [,129]     [,130]      [,131]       [,132]     [,133]    [,134]
[1,] 0.9993496281 0.01109103 0.001033541 2.058639e-06 0.01275423 0.0281617
[2,] 0.0006503719 0.98890897 0.998966459 9.999979e-01 0.98724577 0.9718383
         [,135]       [,136]       [,137]       [,138]      [,139]    [,140]
[1,] 0.02649916 6.261736e-07 4.269681e-05 7.886455e-05 0.001662254 0.4790218
[2,] 0.97350084 9.999994e-01 9.999573e-01 9.999211e-01 0.998337746 0.5209782
         [,141]    [,142]       [,143]      [,144]      [,145]       [,146]
[1,] 0.08670798 0.0101492 0.0005608574 0.004288511 0.003159781 0.0005410043
[2,] 0.91329202 0.9898508 0.9994391426 0.995711489 0.996840219 0.9994589957
          [,147]    [,148]       [,149]       [,150]      [,151]       [,152]
[1,] 0.001001341 0.1705743 1.209096e-07 0.0004711142 0.001010712 1.622008e-06
[2,] 0.998998659 0.8294257 9.999999e-01 0.9995288858 0.998989288 9.999984e-01
          [,153]     [,154]       [,155]       [,156]      [,157]     [,158]
[1,] 0.000410378 0.02930709 0.0005707404 0.0003860873 0.003735613 0.02906572
[2,] 0.999589622 0.97069291 0.9994292596 0.9996139127 0.996264387 0.97093428
           [,159]      [,160]      [,161]     [,162]     [,163]       [,164]
[1,] 2.483494e-07 0.990847687 0.007245486 0.98141674 0.08819089 0.0003624275
[2,] 9.999998e-01 0.009152313 0.992754514 0.01858326 0.91180911 0.9996375725
        [,165]       [,166]       [,167]       [,168]     [,169]       [,170]
[1,] 0.1029899 0.0008363382 3.554481e-06 4.385103e-06 0.01740343 4.117114e-05
[2,] 0.8970101 0.9991636618 9.999964e-01 9.999956e-01 0.98259657 9.999588e-01
        [,171]       [,172]       [,173]       [,174]    [,175]       [,176]
[1,] 0.7997986 6.721280e-07 2.137475e-05 0.0001307872 0.4698123 1.255853e-05
[2,] 0.2002014 9.999993e-01 9.999786e-01 0.9998692128 0.5301877 9.999874e-01
           [,177]      [,178]     [,179]       [,180]     [,181]       [,182]
[1,] 2.097755e-05 0.005266254 0.00172667 0.0002848903 0.95437151 1.815111e-05
[2,] 9.999790e-01 0.994733746 0.99827333 0.9997151097 0.04562849 9.999818e-01
          [,183]       [,184]     [,185]     [,186]       [,187]     [,188]
[1,] 0.009988803 0.0003961057 0.93479827 0.02552924 0.0006277911 0.02969397
[2,] 0.990011197 0.9996038943 0.06520173 0.97447076 0.9993722089 0.97030603
           [,189]    [,190]     [,191]       [,192]     [,193]      [,194]
[1,] 5.050863e-05 0.9406445 0.03104686 2.589249e-06 0.02309172 0.001099534
[2,] 9.999495e-01 0.0593555 0.96895314 9.999974e-01 0.97690828 0.998900466
         [,195]      [,196]      [,197]     [,198]       [,199]       [,200]
[1,] 0.01356347 0.005841718 0.006843147 0.02398759 3.747719e-05 0.0005222238
[2,] 0.98643653 0.994158282 0.993156853 0.97601241 9.999625e-01 0.9994777762
> print(result_cont$Entropy)       # Entropy of final clustering
[1] 0.6124841
> print(result_cont$CondEntropy)   # Conditional entropy of final clustering
[1] 0.1814156
> print(result_cont$MutualInfo)    # Mutual information between Y and T
[1] 0.011842
> 
> plot(result_cont, type = "sizes") # Bar plot of cluster sizes (hardened assignments)
> plot(result_cont, type = "info")  # Information-theoretic quantities plot
> 
> 
> 
> cleanEx()
> nameEx("IBmix")
> ### * IBmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IBmix
> ### Title: Information Bottleneck Clustering for Mixed-Type Data
> ### Aliases: IBmix
> ### Keywords: clustering
> 
> ### ** Examples
> 
> # Example dataset with categorical, ordinal, and continuous variables
> set.seed(123)
> data_mix <- data.frame(
+   cat_var = factor(sample(letters[1:3], 100, replace = TRUE)),      # Nominal categorical variable
+   ord_var = factor(sample(c("low", "medium", "high"), 100, replace = TRUE),
+                    levels = c("low", "medium", "high"),
+                    ordered = TRUE),                                # Ordinal variable
+   cont_var1 = rnorm(100),                                          # Continuous variable 1
+   cont_var2 = runif(100)                                           # Continuous variable 2
+ )
> 
> # Perform Mixed-Type Fuzzy Clustering
> result_mix <- IBmix(X = data_mix, ncl = 3, beta = 2, nstart = 1)
  |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100%
> 
> # Print clustering results
> print(result_mix$Cluster)       # Cluster membership matrix
             [,1]         [,2]         [,3]         [,4]         [,5]
[1,] 7.791700e-01 9.868263e-01 3.541036e-01 9.107688e-01 0.9842139459
[2,] 2.208285e-01 1.317295e-02 6.458964e-01 8.923115e-02 0.0156351507
[3,] 1.431633e-06 7.091299e-07 3.229510e-09 4.887257e-12 0.0001509034
             [,6]         [,7]         [,8]         [,9]        [,10]
[1,] 1.427247e-01 9.673375e-01 6.776527e-03 9.839634e-01 3.490173e-02
[2,] 8.572753e-01 3.264957e-02 9.932084e-01 1.603660e-02 9.650981e-01
[3,] 7.338591e-12 1.289171e-05 1.507229e-05 2.625814e-10 1.373959e-07
            [,11]        [,12]        [,13]        [,14]        [,15]
[1,] 7.998459e-01 9.606408e-02 2.187589e-01 6.656050e-01 2.543366e-01
[2,] 2.001540e-01 9.039359e-01 7.812411e-01 3.343950e-01 7.456634e-01
[3,] 4.324089e-08 2.357672e-12 1.584607e-11 4.462019e-11 1.127829e-09
            [,16]        [,17]        [,18]        [,19]        [,20]
[1,] 9.897538e-01 9.869112e-01 1.298602e-02 9.523332e-01 3.755486e-02
[2,] 1.024617e-02 1.307350e-02 9.869240e-01 4.766680e-02 9.624448e-01
[3,] 1.196992e-10 1.529509e-05 9.000467e-05 5.540342e-10 3.001606e-07
            [,21]        [,22]        [,23]        [,24]        [,25]
[1,] 9.578988e-01 1.652737e-01 3.467070e-02 9.841396e-01 9.862327e-01
[2,] 4.209360e-02 8.347262e-01 9.653293e-01 1.586002e-02 1.376717e-02
[3,] 7.557387e-06 8.464083e-08 5.148212e-12 4.052344e-07 1.025070e-07
            [,26]        [,27]        [,28]        [,29]        [,30]
[1,] 1.696793e-01 7.673230e-01 2.774063e-02 2.356290e-02 9.944431e-01
[2,] 8.303203e-01 2.326770e-01 9.722586e-01 9.764371e-01 5.460776e-03
[3,] 4.115805e-07 1.739554e-08 8.165772e-07 7.597728e-11 9.617124e-05
            [,31]        [,32]        [,33]        [,34]        [,35]
[1,] 6.703223e-01 1.323883e-01 2.928747e-04 2.619899e-02 9.747643e-01
[2,] 3.296777e-01 8.676117e-01 5.578425e-06 9.738010e-01 2.523365e-02
[3,] 8.457209e-10 1.940933e-11 9.997015e-01 5.714954e-11 2.042492e-06
            [,36]        [,37]        [,38]        [,39]        [,40]
[1,] 9.939976e-01 2.348629e-01 4.465319e-02 9.113392e-01 8.819329e-01
[2,] 5.986145e-03 7.651371e-01 9.553467e-01 8.866001e-02 1.180671e-01
[3,] 1.624057e-05 1.547419e-09 6.654996e-08 8.300405e-07 4.675625e-08
            [,41]        [,42]      [,43]        [,44]        [,45]
[1,] 9.414376e-01 9.914855e-01 0.84140652 9.659927e-01 4.259843e-01
[2,] 5.856207e-02 8.513747e-03 0.12247197 3.400724e-02 5.740157e-01
[3,] 3.665948e-07 7.469472e-07 0.03612151 7.277535e-09 2.357065e-10
            [,46]        [,47]        [,48]        [,49]        [,50]
[1,] 6.359441e-01 1.977521e-02 9.307528e-01 7.232537e-01 9.810040e-01
[2,] 3.640558e-01 9.802248e-01 6.924498e-02 2.767463e-01 1.899599e-02
[3,] 7.286505e-08 5.324122e-09 2.268136e-06 9.829924e-09 1.717094e-09
            [,51]        [,52]        [,53]        [,54]        [,55]
[1,] 1.433018e-02 8.178989e-01 1.102912e-01 9.732220e-01 7.463280e-01
[2,] 9.856690e-01 1.821011e-01 8.897088e-01 2.677798e-02 2.536719e-01
[3,] 8.519649e-07 2.283192e-08 6.525610e-11 7.140161e-08 5.337688e-08
            [,56]        [,57]        [,58]        [,59]        [,60]
[1,] 3.377021e-02 9.900251e-01 2.718051e-02 9.216107e-01 9.052486e-01
[2,] 9.662286e-01 9.974175e-03 9.728193e-01 7.838930e-02 9.475085e-02
[3,] 1.199338e-06 7.060943e-07 1.389527e-07 1.698742e-08 5.922159e-07
            [,61]        [,62]        [,63]        [,64]        [,65]
[1,] 9.206196e-01 9.941527e-01 5.641652e-01 1.691679e-01 3.672473e-03
[2,] 7.938039e-02 5.846028e-03 4.358348e-01 8.308321e-01 9.963205e-01
[3,] 3.394517e-08 1.292346e-06 1.104276e-09 2.541339e-11 7.055892e-06
            [,66]        [,67]        [,68]        [,69]        [,70]
[1,] 9.957604e-01 2.417355e-02 9.156547e-01 3.666312e-02 0.0166008710
[2,] 4.227189e-03 9.758264e-01 8.434530e-02 9.633369e-01 0.9832662276
[3,] 1.242616e-05 7.781169e-13 1.498289e-08 2.819362e-12 0.0001329014
           [,71]        [,72]        [,73]        [,74]        [,75]
[1,] 0.792029813 7.062739e-02 9.953745e-01 1.175696e-01 8.794521e-01
[2,] 0.207819629 9.293726e-01 4.615878e-03 8.824304e-01 1.205478e-01
[3,] 0.000150558 7.048395e-10 9.641879e-06 7.257490e-10 2.283974e-08
            [,76]        [,77]       [,78]        [,79]        [,80]
[1,] 6.801645e-02 5.457859e-01 0.968072779 7.389552e-02 9.886361e-01
[2,] 9.319835e-01 4.542141e-01 0.030133369 9.261045e-01 1.136325e-02
[3,] 3.297172e-11 3.478867e-09 0.001793852 2.858204e-09 6.464585e-07
            [,81]        [,82]        [,83]        [,84]       [,85]
[1,] 5.422053e-02 0.9803119822 8.811481e-02 2.648747e-02 0.992178304
[2,] 9.457795e-01 0.0194661969 9.118852e-01 9.735125e-01 0.005377071
[3,] 1.253856e-08 0.0002218209 2.718296e-10 4.359026e-12 0.002444625
            [,86]        [,87]       [,88]        [,89]        [,90]
[1,] 4.969479e-02 9.592157e-02 8.22543e-01 8.847690e-01 9.718997e-01
[2,] 9.503052e-01 9.040784e-01 1.77457e-01 1.152310e-01 2.810025e-02
[3,] 1.626322e-10 9.353666e-11 4.82488e-10 4.104778e-10 2.463014e-08
            [,91]        [,92]        [,93]       [,94]        [,95]
[1,] 4.285855e-01 1.134901e-02 5.316047e-01 3.92827e-01 2.167448e-01
[2,] 5.714132e-01 9.886503e-01 4.683933e-01 6.07173e-01 7.832552e-01
[3,] 1.312656e-06 6.429087e-07 1.971403e-06 7.06360e-09 2.641631e-08
            [,96]        [,97]        [,98]        [,99]       [,100]
[1,] 4.781417e-01 5.801937e-01 9.956112e-01 9.886181e-01 3.403973e-03
[2,] 5.218583e-01 4.198063e-01 4.360679e-03 1.138185e-02 9.965878e-01
[3,] 1.748322e-09 2.678282e-09 2.816856e-05 1.741442e-09 8.267872e-06
> print(result_mix$InfoXT)        # Mutual information between X and T
[1] 0.6677769
> print(result_mix$MutualInfo)    # Mutual information between Y and T
[1] 0.4276182
> 
> # Summary of output
> summary(result_mix)
Summary of IBmix clustering
---------------------------
Call: IBmix(X = data_mix, ncl = 3, beta = 2, nstart = 1)
n = 100, k = 3

Continuous variables: 2   Categorical variables: 2

Mean membership per cluster:
[1] 0.5388 0.4508 0.0104

Hardened sizes (argmax):
hardened
 1  2  3 
55 44  1 

Information metrics:
Entropy H(T): 1.067609
Conditional H(T|X): 0.399833
Mutual Information I(Y;T): 0.427618

Hyperparameters & details:
beta = 2
s = 0.7, 0.7
lambda = 0.5, 0.7071
alpha = 1
Kernels = cont:gaussian, nom:aitchisonaitken, ord:liracine

Converged: FALSE
Iterations: 100
Convergence tolerance: 1e-05
> 
> # Simulated categorical data example
> set.seed(123)
> data_cat <- data.frame(
+   Var1 = as.factor(sample(letters[1:3], 100, replace = TRUE)),  # Nominal variable
+   Var2 = as.factor(sample(letters[4:6], 100, replace = TRUE)),  # Nominal variable
+   Var3 = factor(sample(c("low", "medium", "high"), 100, replace = TRUE),
+                 levels = c("low", "medium", "high"), ordered = TRUE)  # Ordinal variable
+ )
> 
> # Perform fuzzy clustering on categorical data with standard IB
> result_cat <- IBmix(X = data_cat, ncl = 3, beta = 15, lambda = -1, nstart = 2, maxiter = 200)
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
> 
> # Print clustering results
> print(result_cat$Cluster)       # Cluster membership matrix
          [,1]       [,2]        [,3]       [,4]       [,5]       [,6]
[1,] 0.5468578 0.94382381 0.965267275 0.03530922 0.49106054 0.03551762
[2,] 0.1736619 0.03724956 0.025836137 0.15812251 0.45314590 0.71719231
[3,] 0.2794803 0.01892663 0.008896588 0.80656827 0.05579356 0.24729007
           [,7]      [,8]       [,9]      [,10]     [,11]     [,12]      [,13]
[1,] 0.01993469 0.4161906 0.92236810 0.87272591 0.5469294 0.4161906 0.77970792
[2,] 0.14284518 0.2853682 0.04957046 0.08597818 0.2382950 0.2853682 0.12497096
[3,] 0.83722014 0.2984412 0.02806144 0.04129591 0.2147756 0.2984412 0.09532113
          [,14]       [,15]     [,16]      [,17]      [,18]      [,19]
[1,] 0.01993469 0.965267275 0.1988567 0.92236810 0.94382381 0.87272591
[2,] 0.14284518 0.025836137 0.6848071 0.04957046 0.03724956 0.08597818
[3,] 0.83722014 0.008896588 0.1163362 0.02806144 0.01892663 0.04129591
          [,20]      [,21]      [,22]      [,23]      [,24]     [,25]
[1,] 0.04723971 0.87272591 0.09606413 0.92236810 0.01993469 0.3106843
[2,] 0.15519200 0.08597818 0.17143496 0.04957046 0.14284518 0.5721917
[3,] 0.79756830 0.04129591 0.73250090 0.02806144 0.83722014 0.1171240
          [,26]      [,27]      [,28]      [,29]      [,30]      [,31]
[1,] 0.01993469 0.04723971 0.06562426 0.41163552 0.03530922 0.09606413
[2,] 0.14284518 0.15519200 0.23262400 0.49644656 0.15812251 0.17143496
[3,] 0.83722014 0.79756830 0.70175173 0.09191792 0.80656827 0.73250090
           [,32]      [,33]      [,34]     [,35]      [,36]      [,37]
[1,] 0.965267275 0.92236810 0.77970792 0.3831874 0.01993469 0.09606413
[2,] 0.025836137 0.04957046 0.12497096 0.1744054 0.14284518 0.17143496
[3,] 0.008896588 0.02806144 0.09532113 0.4424071 0.83722014 0.73250090
          [,38]      [,39]      [,40]      [,41]     [,42]     [,43]     [,44]
[1,] 0.92236810 0.07591368 0.77970792 0.07233153 0.2786815 0.5468578 0.6394088
[2,] 0.04957046 0.70428303 0.12497096 0.78824657 0.1918812 0.1736619 0.1899129
[3,] 0.02806144 0.21980330 0.09532113 0.13942190 0.5294372 0.2794803 0.1706783
          [,45]      [,46]      [,47]      [,48]      [,49]     [,50]
[1,] 0.41163552 0.04723971 0.41163552 0.03530922 0.77970792 0.6641126
[2,] 0.49644656 0.15519200 0.49644656 0.15812251 0.12497096 0.2146139
[3,] 0.09191792 0.79756830 0.09191792 0.80656827 0.09532113 0.1212735
          [,51]      [,52]      [,53]      [,54]      [,55]      [,56]
[1,] 0.07591368 0.04723971 0.92236810 0.07591368 0.06562426 0.04723971
[2,] 0.70428303 0.15519200 0.04957046 0.70428303 0.23262400 0.15519200
[3,] 0.21980330 0.79756830 0.02806144 0.21980330 0.70175173 0.79756830
          [,57]     [,58]      [,59]     [,60]      [,61]      [,62]      [,63]
[1,] 0.09606413 0.3106843 0.77970792 0.5469294 0.07591368 0.92236810 0.04723971
[2,] 0.17143496 0.5721917 0.12497096 0.2382950 0.70428303 0.04957046 0.15519200
[3,] 0.73250090 0.1171240 0.09532113 0.2147756 0.21980330 0.02806144 0.79756830
         [,64]      [,65]      [,66]      [,67]     [,68]     [,69]      [,70]
[1,] 0.2786815 0.07233153 0.92236810 0.03551762 0.4161906 0.3831874 0.03530922
[2,] 0.1918812 0.78824657 0.04957046 0.71719231 0.2853682 0.1744054 0.15812251
[3,] 0.5294372 0.13942190 0.02806144 0.24729007 0.2984412 0.4424071 0.80656827
          [,71]     [,72]       [,73]      [,74]      [,75]     [,76]
[1,] 0.07233153 0.3831874 0.965267275 0.07591368 0.03551762 0.4161906
[2,] 0.78824657 0.1744054 0.025836137 0.70428303 0.71719231 0.2853682
[3,] 0.13942190 0.4424071 0.008896588 0.21980330 0.24729007 0.2984412
          [,77]      [,78]      [,79]     [,80]      [,81]       [,82]
[1,] 0.04723971 0.03551762 0.87272591 0.6394088 0.03551762 0.965267275
[2,] 0.15519200 0.71719231 0.08597818 0.1899129 0.71719231 0.025836137
[3,] 0.79756830 0.24729007 0.04129591 0.1706783 0.24729007 0.008896588
          [,83]     [,84]     [,85]      [,86]      [,87]     [,88]     [,89]
[1,] 0.49106054 0.1401583 0.4161906 0.07591368 0.01993469 0.1401583 0.3106843
[2,] 0.45314590 0.6737702 0.2853682 0.70428303 0.14284518 0.6737702 0.5721917
[3,] 0.05579356 0.1860715 0.2984412 0.21980330 0.83722014 0.1860715 0.1171240
          [,90]      [,91]      [,92]     [,93]      [,94]      [,95]     [,96]
[1,] 0.94382381 0.03551762 0.92236810 0.1988567 0.07233153 0.05866124 0.3831874
[2,] 0.03724956 0.71719231 0.04957046 0.6848071 0.78824657 0.72393727 0.1744054
[3,] 0.01892663 0.24729007 0.02806144 0.1163362 0.13942190 0.21740149 0.4424071
          [,97]      [,98]     [,99]     [,100]
[1,] 0.01993469 0.87272591 0.3106843 0.92236810
[2,] 0.14284518 0.08597818 0.5721917 0.04957046
[3,] 0.83722014 0.04129591 0.1171240 0.02806144
> print(result_cat$InfoXT)        # Mutual information between X and T
[1] 0.6004572
> print(result_cat$MutualInfo)    # Mutual information between Y and T
[1] 0.04863208
> 
> plot(result_cat, type = "sizes") # Bar plot of cluster sizes (hardened assignments)
> plot(result_cat, type = "info")  # Information-theoretic quantities plot
> 
> # Simulated continuous data example
> set.seed(123)
> # Continuous data with 100 observations, 5 features
> data_cont <- as.data.frame(matrix(rnorm(500), ncol = 5))
> 
> # Perform fuzzy clustering on continuous data with standard IB
> result_cont <- IBmix(X = data_cont, ncl = 3, beta = 50, s = -1, nstart = 2)
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
> 
> # Print clustering results
> print(result_cont$Cluster)       # Cluster membership matrix
             [,1]        [,2]         [,3]         [,4]         [,5]       [,6]
[1,] 0.0017870542 0.031917212 0.1952827024 0.0069669101 2.840371e-03 0.73924284
[2,] 0.0003192324 0.007061454 0.0003696466 0.0003188175 6.424903e-05 0.00164105
[3,] 0.9978937134 0.961021333 0.8043476510 0.9927142724 9.970954e-01 0.25911611
             [,7]         [,8]        [,9]       [,10]        [,11]       [,12]
[1,] 2.225568e-02 2.980293e-04 0.004224915 0.004312258 0.0191861717 0.010505295
[2,] 7.147447e-05 3.799947e-05 0.005367489 0.054556479 0.0004034736 0.006392447
[3,] 9.776729e-01 9.996640e-01 0.990407596 0.941131263 0.9804103546 0.983102258
            [,13]        [,14]       [,15]      [,16]       [,17]        [,18]
[1,] 2.367920e-03 0.0125058032 0.010952768 0.96247298 0.022409668 0.0002314112
[2,] 8.753307e-06 0.0008122787 0.006512237 0.00473063 0.001383458 0.0001666259
[3,] 9.976233e-01 0.9866819181 0.982534995 0.03279639 0.976206874 0.9996019629
            [,19]        [,20]        [,21]        [,22]        [,23]
[1,] 0.0112346206 0.0108394677 0.0001500460 0.0023850215 0.0008693965
[2,] 0.0002710437 0.0005909856 0.0004308589 0.0004357132 0.0002444722
[3,] 0.9884943357 0.9885695467 0.9994190951 0.9971792653 0.9988861313
            [,24]      [,25]       [,26]        [,27]       [,28]        [,29]
[1,] 0.0003047879 0.02098483 0.001135261 0.0007890891 0.012681052 7.316124e-05
[2,] 0.0004982443 0.21100408 0.001865981 0.0001144578 0.002277681 1.701935e-04
[3,] 0.9991969679 0.76801109 0.996998758 0.9990964532 0.985041267 9.997566e-01
           [,30]      [,31]       [,32]        [,33]       [,34]        [,35]
[1,] 0.477614946 0.02321506 0.003199269 0.0171248074 0.173000741 1.950631e-02
[2,] 0.002030721 0.12809434 0.001030267 0.0004441854 0.003070901 1.968654e-05
[3,] 0.520354333 0.84869060 0.995770464 0.9824310072 0.823928358 9.804740e-01
           [,36]        [,37]       [,38]      [,39]        [,40]      [,41]
[1,] 0.198405712 3.996910e-03 0.001524373 0.04690438 5.927620e-04 0.03889019
[2,] 0.008622618 1.111127e-05 0.001825364 0.89792996 2.151851e-05 0.07313694
[3,] 0.792971670 9.959920e-01 0.996650263 0.05516566 9.993857e-01 0.88797288
           [,42]        [,43]        [,44]        [,45]        [,46]
[1,] 0.003158488 0.0001630315 2.313156e-01 0.0984616195 0.0005563237
[2,] 0.001009204 0.0001996840 2.183602e-05 0.0000596663 0.0001677923
[3,] 0.995832307 0.9996372845 7.686626e-01 0.9014787142 0.9992758841
            [,47]       [,48]     [,49]        [,50]       [,51]        [,52]
[1,] 1.522718e-03 0.001769822 0.5587478 0.0636324321 0.001679795 0.0018986721
[2,] 5.683373e-05 0.001511038 0.2724881 0.0006052075 0.002837388 0.0004390922
[3,] 9.984204e-01 0.996719140 0.1687641 0.9357623605 0.995482816 0.9976622356
           [,53]        [,54]        [,55]       [,56]        [,57]
[1,] 0.004484427 0.0151244779 0.0008981777 0.937222504 0.0001571652
[2,] 0.001212659 0.0000556908 0.0002584919 0.001220349 0.0037608820
[3,] 0.994302914 0.9848198313 0.9988433305 0.061557147 0.9960819528
            [,58]       [,59]       [,60]       [,61]        [,62]        [,63]
[1,] 0.0341021821 0.007727010 0.027098000 0.005258709 0.0057463420 1.516084e-03
[2,] 0.0009407243 0.001145524 0.004165488 0.003412391 0.0004225154 8.742421e-05
[3,] 0.9649570936 0.991127466 0.968736511 0.991328900 0.9938311426 9.983965e-01
            [,64]       [,65]       [,66]       [,67]        [,68]       [,69]
[1,] 0.0001721416 0.004990706 0.001446081 0.005914060 7.913248e-04 0.036866263
[2,] 0.9902393968 0.008770487 0.000642829 0.002591609 3.424895e-05 0.004881026
[3,] 0.0095884617 0.986238807 0.997911090 0.991494330 9.991744e-01 0.958252711
            [,70]        [,71]        [,72]       [,73]       [,74]
[1,] 0.0263626110 0.0001236190 0.0003046144 0.256724664 0.008754707
[2,] 0.0002591652 0.0009339021 0.0013731776 0.002662786 0.497793936
[3,] 0.9733782237 0.9989424789 0.9983222080 0.740612550 0.493451357
            [,75]        [,76]        [,77]       [,78]       [,79]
[1,] 0.0026310997 2.349467e-02 0.0003700982 0.002660026 0.006048434
[2,] 0.0008169571 5.143742e-05 0.0001286292 0.007733978 0.002277227
[3,] 0.9965519432 9.764539e-01 0.9995012726 0.989605996 0.991674339
            [,80]        [,81]      [,82]        [,83]        [,84]
[1,] 0.0070437356 0.0090566875 0.01124477 0.0004961983 1.349249e-02
[2,] 0.0001855684 0.0001205696 0.01785319 0.0002281145 7.150206e-05
[3,] 0.9927706960 0.9908227429 0.97090203 0.9992756872 9.864360e-01
            [,85]       [,86]       [,87]       [,88]        [,89]        [,90]
[1,] 0.0017384974 0.003480772 0.011701153 0.027384449 0.0005418734 0.0724665032
[2,] 0.0006173686 0.001001331 0.004955307 0.001324408 0.0008818207 0.0006074864
[3,] 0.9976441340 0.995517897 0.983343540 0.971291143 0.9985763058 0.9269260104
           [,91]        [,92]        [,93]       [,94]        [,95]      [,96]
[1,] 0.034661980 1.320107e-03 0.0011498516 0.015062776 0.1275754657 0.01014773
[2,] 0.001158466 2.933621e-05 0.0009105959 0.000474961 0.0001331841 0.90037101
[3,] 0.964179555 9.986506e-01 0.9979395524 0.984462263 0.8722913502 0.08948125
           [,97]        [,98]        [,99]       [,100]
[1,] 0.126069757 6.436662e-02 0.0024679692 3.732114e-04
[2,] 0.001059923 6.383459e-05 0.0001118293 9.225188e-05
[3,] 0.872870319 9.355695e-01 0.9974202015 9.995345e-01
> print(result_cont$InfoXT)        # Mutual information between X and T
[1] 0.3817718
> print(result_cont$MutualInfo)    # Mutual information between Y and T
[1] 0.01009791
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.178 2.421 12.71 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
